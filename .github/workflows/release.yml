name: release

on:
  workflow_dispatch: ~
  push:
    tags:
      - '*.*.*'

jobs:
  code-quality:
    name: 📊 Check code quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: 🧪 Check tests are passing
        run: |
          pip install poetry nox
          nox -s test
  build-n-publish:
    name: Create release and publish 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: [code-quality]
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2
      - name: 🛎️ Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: ${{ contains(needs.tag_version.outputs.tag, '-rc') || contains(needs.tag_version.outputs.tag, '-b') || contains(needs.tag_version.outputs.tag, '-a') }}
      - name: 🏷️ Update latest tag
        uses: EndBug/latest-tag@latest

      # PyPi release steps
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Build
        run: poetry build
      - name: Publish distribution 📦 to PyPI
        run: poetry publish -u __token__ -p ${{ secrets.pypi_password }}
